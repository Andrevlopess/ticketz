generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  logo        String?
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  deletedAt   DateTime? @map("deleted_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  userId      Int?
  User        User?     @relation(fields: [userId], references: [id])
  Ticket      Ticket[]

  @@map("companies")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  first_name      String
  last_name       String
  photo           String?       @map("photo_url")
  phone           String?
  password        String
  role            Role          @default(USER)
  createdAt       DateTime      @default(now()) @map("created_at")
  deletedAt       DateTime?     @map("deleted_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  company         Company[]
  group           Group[]
  TicketNotes     TicketNotes[]
  createdTickets  Ticket[]      @relation("CreatedTickets")
  resolvedTickets Ticket[]      @relation("ResolvedTickets")

  @@map("users")
}

model Ticket {
  id            Int           @id @default(autoincrement())
  subject       String
  content       String?
  groupId       Int
  companyId     Int
  statusId      Int
  priorityId    Int
  ticketNotesId Int?
  creatorId     Int
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  notes         TicketNotes[]
  Company       Company       @relation(fields: [companyId], references: [id])
  Creator       User          @relation("CreatedTickets", fields: [creatorId], references: [id])
  Group         Group         @relation(fields: [groupId], references: [id])
  Priority      Priority      @relation(fields: [priorityId], references: [id])
  Status        Status        @relation(fields: [statusId], references: [id])
  Solvers       User[]        @relation("ResolvedTickets")
  Tags          Tag[]         @relation("TicketTags")

  @@map("tickets")
}

model TicketNotes {
  id        Int       @id @default(autoincrement())
  content   String    @unique
  ticketId  Int
  creatorId Int?
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  NoteType  NoteType  @default(PRIVATE)
  Creator   User?     @relation(fields: [creatorId], references: [id])
  Ticket    Ticket    @relation(fields: [ticketId], references: [id])

  @@map("ticket_notes")
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  Ticket     Ticket[] @relation("TicketTags")

  @@map("tags")
}

model Status {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Ticket    Ticket[]

  @@map("statuses")
}

model Group {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  tickets   Ticket[]
  users     User[]

  @@map("groups")
}

model Priority {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  Ticket     Ticket[]

  @@map("priorities")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum NoteType {
  PUBLIC
  PRIVATE
}
